@@HEADER@@

import jakarta.ejb.EJB;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.ws.rs.DELETE;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.PUT;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.Context;
import jakarta.ws.rs.core.MediaType;
import java.util.Date;
import java.util.List;
import java.util.@@TYPE@@;

@@IMPORTEXTRAC@@

/**
 * REST context and service for data @@beanName_lowercase@@ related functionality.
 *
 */
@Path("/v1")
public class @@beanName@@RestService {

    @Context
    private HttpServletRequest request;

    @EJB(lookup = "java:global/sapi-@@beanName_lowercase@@/sapi-@@beanName_lowercase@@-service/@@beanName@@Service")
    private @@beanName@@Service @@beanName_lowercase@@Service;

    /**
     * Method to test service's state.
     *
     * @return {@link Date} as string.
     */
    @GET
    @Path("/ping")
    @Produces(MediaType.TEXT_PLAIN)
    public String ping() {
        return new Date().toString();
    }

    /**
     * Creates a data @@beanName_lowercase@@.
     *
     * @param @@beanName_lowercase@@ {@link @@beanName@@}
     * @return @@TYPE@@ as {@link String} @@beanName_lowercase@@ ID
     */
    @POST
    @Path("/")
    @Produces(MediaType.TEXT_PLAIN)
    public @@TYPE@@ create(@@beanName@@ @@beanName_lowercase@@) throws MissingArgumentException, DatabaseHandlerException {
        String requestingUser = request.getUserPrincipal().getName();
        return @@beanName_lowercase@@Service.create(@@beanName_lowercase@@);
    }

    /**
     * Deletes the data @@beanName_lowercase@@ matching the specified @@beanName_lowercase@@ ID.
     *
     * @param @@beanName_lowercase@@Id @@TYPE@@ as {@link String}
     */
    @DELETE
    @Path("/{@@beanName_lowercase@@Id")
    public void delete(@PathParam("@@beanName_lowercase@@Id") String @@beanName_lowercase@@Id) throws DatabaseHandlerException {
        String requestingUser = request.getUserPrincipal().getName();
        @@beanName_lowercase@@Service.delete(@@TYPE@@.fromString(@@beanName_lowercase@@Id));
    }

    /**
     * Gets the data @@beanName_lowercase@@ matching the specified @@beanName_lowercase@@ ID.
     *
     * @param @@beanName_lowercase@@Id @@TYPE@@ as {@link String}
     * @return @@beanName_lowercase@@ {@link @@beanName@@}
     */
    @GET
    @Path("/{@@beanName_lowercase@@Id: [0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}}")
    @Produces(MediaType.APPLICATION_JSON)
    public @@beanName@@ get(@PathParam("@@beanName_lowercase@@Id") String @@beanName_lowercase@@Id) throws DatabaseHandlerException {
        return @@beanName_lowercase@@Service.get(@@TYPE@@.fromString(@@beanName_lowercase@@Id));
    }

    /**
     * Gets all data @@beanName_lowercase@@s.
     *
     * @return {@link List} of {@link @@beanName@@}
     */
    @GET
    @Path("/all")
    @Produces(MediaType.APPLICATION_JSON)
    public List<@@beanName@@> getAll() throws DatabaseHandlerException {
        return @@beanName_lowercase@@Service.getAll();
    }

    /**
     * Updates the data @@beanName_lowercase@@ matching the specified @@beanName_lowercase@@ ID.
     *
     * @param @@beanName_lowercase@@Id @@TYPE@@ as {@link String}
     * @param @@beanName_lowercase@@   {@link @@beanName@@} being modified
     * @return @@TYPE@@ as {@link String} @@beanName_lowercase@@ ID
     */
    @PUT
    @Path("/{@@beanName_lowercase@@Id")
    @Produces(MediaType.TEXT_PLAIN)
    public @@TYPE@@ update(@PathParam("@@beanName_lowercase@@Id") String @@beanName_lowercase@@Id, @@beanName@@ @@beanName_lowercase@@) throws MissingArgumentException,
            DatabaseHandlerException {
        @@beanName_lowercase@@.setId(@@TYPE@@.fromString(@@beanName_lowercase@@Id));
        return @@beanName_lowercase@@Service.update(@@beanName_lowercase@@);
    }
}
